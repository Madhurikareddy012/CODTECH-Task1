/*TASK1*/
/*ALL LOGIC GATES*/

module gates(x ,y,a,b,c,d,e);
input x,y;
output a,b,c,d,e;
assign a = x & y;      
assign b = x | y;      
assign c = x ~^ y;     
assign d = ~(x & y);   
assign e = ~(x | y); 
endmodule

/*ALL LOGIC GATES TESTBENCH*/

module gates_tb();
reg x,y;
wire a,b,c,d,e;
gates g1(x,y,a,b,c,d,e);
initial  begin
repeat(20)begin
x=$random;
y=$random;
#10;
end
end
endmodule


/*HALF ADDER*/

module ha(a,b,sum,carry);
input a,b;
output sum,carry;
assign sum=a^b;
assign carry= a&b;
endmodule

/*HALF ADDER TESTBENCH*/

module ha_tb();
reg a,b;
wire sum,carry;
initial
begin
a=1'b0;b=1'b0;
#100 a=1'b0;b=1'b1;
#100 a=1'b1;b=1'b0;
#100 a=1'b1;b=1'b1;
end
ha h1(a,b,sum,carry);
endmodule


/*FULL ADDER*/

module fa(a,b,c,sum,carry);
input a,b,c;
output sum,carry;
assign sum=a^b^c;
assign carry= ((a&b)|(b&c)|(c&a));
endmodule

/*FULL ADDER TESTBENCH*/

module fa_tb();
reg a,b,c;
wire sum,carry;
initial
begin
a=1'b0;b=1'b0;c=1'b0;
#100 a=1'b0;b=1'b0;c=1'b1;
#100 a=1'b0;b=1'b1;c=1'b0;
#100 a=1'b0;b=1'b1;c=1'b1;
#100 a=1'b1;b=1'b0;c=1'b0;
#100 a=1'b1;b=1'b0;c=1'b1;
#100 a=1'b1;b=1'b1;c=1'b0;
#100 a=1'b1;b=1'b1;c=1'b1;
end
fa f1(a,b,c,sum,carry);
endmodule


/*4X1 MUX*/

module mux4(i,s,y);
input [3:0]i;
input [1:0]s;
output reg y;
always @(*) begin
if (s == 00) 
    y = i[0];
 else if (s == 01) 
    y = i[1];
 else if (s == 10) 
    y = i[2];
 else 
    y = i[3];
end
endmodule

/*4X1 MUX TESTBENCH*/

module mux4_tb();
reg [3:0]i;
reg [1:0]s;
wire y;
mux4 m1(i,s,y);
initial begin
repeat(30)begin
i=0101;
# 20 s=00; 
#20 s=01; 
#20 s=10;
#20 s=11;
end
end
endmodule


/*1X4 DEMUX*/

module demux(y, i, s);
  input [1:0] s;
  input i;
  output reg [3:0] y;
always @(s or i) begin
   case (s)
      2'b00: y[0] = i;
      2'b01: y[1] = i;
      2'b10: y[2] = i;
      2'b11: y[3] = i ;
      endcase
  end
endmodule

/*1X4 DEMUX TESTBENCH*/

module demux_tb();
reg [1:0]s;
reg i;
wire [3:0]y;
initial 
begin
i=1;
 s=2'b00;
#100 s=2'b01;
#100s=2'b10;
#100s=2'b11;
end
demux d1(y, i, s);
endmodule
